
import { db } from '../server/database.js';

async function verifyDatabaseSchema(): Promise<void> {
  console.log('üîç V√âRIFICATION DU SCH√âMA DE BASE DE DONN√âES');
  console.log('===========================================\n');

  try {
    // V√©rifier les colonnes de la table missions
    console.log('üìã V√©rification table missions...');
    const missionsColumns = await db.execute(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'missions' 
      ORDER BY ordinal_position
    `);

    console.log('‚úÖ Colonnes missions:', missionsColumns.rows.length);
    missionsColumns.rows.forEach(row => {
      console.log(`   - ${row.column_name} (${row.data_type}) ${row.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'}`);
    });

    // V√©rifier les colonnes de la table announcements
    console.log('\nüì¢ V√©rification table announcements...');
    const announcementsColumns = await db.execute(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'announcements' 
      ORDER BY ordinal_position
    `);

    console.log('‚úÖ Colonnes announcements:', announcementsColumns.rows.length);
    announcementsColumns.rows.forEach(row => {
      console.log(`   - ${row.column_name} (${row.data_type}) ${row.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'}`);
    });

    // V√©rifier les colonnes de la table bids
    console.log('\nüí∞ V√©rification table bids...');
    const bidsColumns = await db.execute(`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'bids' 
      ORDER BY ordinal_position
    `);

    console.log('‚úÖ Colonnes bids:', bidsColumns.rows.length);
    bidsColumns.rows.forEach(row => {
      console.log(`   - ${row.column_name} (${row.data_type}) ${row.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'}`);
    });

    // Test de cr√©ation simple
    console.log('\nüß™ Test cr√©ation mission...');
    const testMission = {
      title: 'Test Schema Verification',
      description: 'Mission de test pour v√©rifier que toutes les colonnes fonctionnent correctement',
      category: 'test',
      status: 'published',
      user_id: 1,
      created_at: new Date(),
      updated_at: new Date()
    };

    const { missions } = await import('../shared/schema.js');
    const result = await db.insert(missions).values(testMission).returning();
    
    if (result.length > 0) {
      console.log('‚úÖ Cr√©ation mission test r√©ussie, ID:', result[0].id);
      
      // Supprimer la mission test
      await db.delete(missions).where({ id: result[0].id } as any);
      console.log('‚úÖ Mission test supprim√©e');
    }

    console.log('\nüéâ V√©rification du sch√©ma termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification du sch√©ma:', error);
    throw error;
  }
}

// Ex√©cution si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  verifyDatabaseSchema()
    .then(() => {
      console.log('‚úÖ V√©rification termin√©e');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}
